services:
  postgres:
    container_name: postgres_container
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /data/postgres
      POSTGRES_INITDB_ARGS: "--data-checksums"
      POSTGRES_HOST_AUTH_METHOD: trust
    command: ["postgres", "-c", "log_statement=all", "-c", "log_connections=on"]
    volumes:
      - postgres:/data/postgres
      - ./migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U users"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  cache:
    image: redis:latest
    restart: always
    ports:
      - '6380:6379'
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - cache:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  minio:
    container_name: minio
    image: 'minio/minio'
    command: server /data --console-address ":9001"
    volumes:
      - 'minio_data:/data'
    ports:
      - "9000:9000"
      - "9001:9001"
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5

  minio-init:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    volumes:
      - ./minio-init.sh:/minio-init.sh
    entrypoint: ["/bin/sh", "/minio-init.sh"]
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
      MINIO_ACCESS_KEY: "${MINIO_ACCESS_KEY}"
      MINIO_SECRET_KEY: "${MINIO_SECRET_KEY}"
      MINIO_BUCKET_NAME: "${MINIO_BUCKET_NAME}"

  auth-service:
    build:
      context: .
      dockerfile: auth/Dockerfile
    env_file:
      - .env
    environment:
      GRPC_PORT: ${GRPC_AUTH_PORT}
      JWT_SECRET: "${JWT_TOKEN}"
    ports:
      - "${GRPC_AUTH_PORT}:${GRPC_AUTH_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
      cache:
        condition: service_healthy

  file-service:
    build:
      context: .
      dockerfile: file/Dockerfile
    env_file:
      - .env
    environment:
      GRPC_PORT: ${GRPC_FILE_PORT}
      AUTH_SERVICE_ADDR: "auth-service:${GRPC_AUTH_PORT}"
      POSTGRES_HOST: postgres
      MINIO_ENDPOINT: "minio:9000"
      MINIO_ACCESS_KEY: "${MINIO_ACCESS_KEY}"
      MINIO_SECRET_KEY: "${MINIO_SECRET_KEY}"
      MINIO_USE_SSL: "false"
      MINIO_BUCKET_NAME: "${MINIO_BUCKET_NAME}"
    ports:
      - "${GRPC_FILE_PORT}:${GRPC_FILE_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
      auth-service:
        condition: service_started

  gateway:
    build:
      context: .
      dockerfile: gateway/Dockerfile
    env_file:
      - .env
    environment:
      PORT: ${PORT}
      AUTH_SERVICE_ADDR: "auth-service:${GRPC_AUTH_PORT}"
      FILE_SERVICE_ADDR: "file-service:${GRPC_FILE_PORT}"
    ports:
      - "${PORT}:${PORT}"
    depends_on:
      auth-service:
        condition: service_started
      file-service:
        condition: service_started

volumes:
  minio_data:
  postgres:
  cache:
    driver: local